/*
 * Journals
 *
 * ...
 *
 * The version of the OpenAPI document: 0.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TimedEvent {
    #[serde(rename = "startEventOn", skip_serializing_if = "Option::is_none")]
    pub start_event_on: Option<String>,
    #[serde(rename = "stopEventOn", skip_serializing_if = "Option::is_none")]
    pub stop_event_on: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "content", skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    #[serde(rename = "attachments", skip_serializing_if = "Option::is_none")]
    pub attachments: Option<Vec<String>>,
    #[serde(rename = "dateFrom", skip_serializing_if = "Option::is_none")]
    pub date_from: Option<String>,
    #[serde(rename = "dateTo", skip_serializing_if = "Option::is_none")]
    pub date_to: Option<String>,
}

impl TimedEvent {
    pub fn new() -> TimedEvent {
        TimedEvent {
            start_event_on: None,
            stop_event_on: None,
            id: None,
            title: None,
            content: None,
            attachments: None,
            date_from: None,
            date_to: None,
        }
    }
}


